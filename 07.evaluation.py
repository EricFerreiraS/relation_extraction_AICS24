import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
plt.rcParams.update({'font.size': 30})
import settings
from tqdm import tqdm
import os

path='NetDissect-Lite/' #concepts generated by NetDissect

import settings #settings file from NetDissect

global_features = pd.read_csv(path+f'result/global_positive_unique_features_{settings.DATASET_TRANS}_{settings.MODEL}_{settings.DATASET}.csv')

df_rel_gb = pd.read_csv(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relations_global.csv')
df_rel_mto_gb = pd.read_csv(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relations_global_mto.csv')

df_rel_lc = pd.read_csv(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relations_local.csv')
df_rel_mto_lc = pd.read_csv(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relations_local_mto.csv')

df_rel_lc_img = pd.read_csv(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relations_local_img.csv')
df_rel_mto_lc_img = pd.read_csv(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relations_local_img_mto.csv')

if settings.DATASET_TRANS == 'cifar10':
    df_rel_gb['class'] = df_rel_gb['class'].str.replace('_','')
    df_rel_mto_gb['class'] = df_rel_mto_gb['class'].str.replace('_','')

    df_rel_lc['class'] = df_rel_lc['class'].str.replace('_','')
    df_rel_mto_lc['class'] = df_rel_mto_lc['class'].str.replace('_','')

    df_rel_lc_img['class'] = df_rel_lc_img['class'].str.replace('_','')
    df_rel_mto_lc_img['class'] = df_rel_mto_lc_img['class'].str.replace('_','')

classes = global_features['class'].unique()

def relation_analysis(df_gb, df_lc, kind='class'):
    dict_classes = {}
    if kind == 'class':
        for c in tqdm(classes):
            df_global = df_gb[df_gb['class']==c][['node1_label','relation_label','node2_label']].groupby(df_gb[df_gb['class']==c][['node1_label','relation_label','node2_label']].apply(frozenset,axis=1))['node1_label'].count().reset_index()
         
            df_local = df_lc[df_lc['class']==c][['node1_label','relation_label','node2_label']].groupby(df_lc[df_lc['class']==c][['node1_label','relation_label','node2_label']].apply(frozenset,axis=1))['node1_label'].count().reset_index()
            n_lc = df_local.shape[0]
           
            df_join = df_local.merge(df_global,how='inner',on=['index'])
            dict_classes[c] = df_join.shape[0]/n_lc
    else:
        for c in tqdm(classes):
            df_global = df_gb[df_gb['class']==c][['node1_label','relation_label','node2_label']].groupby(df_gb[df_gb['class']==c][['node1_label','relation_label','node2_label']].apply(frozenset,axis=1))['node1_label'].count().reset_index()
            df_local = df_lc[df_lc['class']==c][['node1_label','relation_label','node2_label']].groupby(df_lc[df_lc['class']==c][['node1_label','relation_label','node2_label','name']].apply(frozenset,axis=1))['node1_label'].count().reset_index()

            img_names = df_lc[df_lc['class']==c]['name'].unique()
            dict_names={}

            def remove_name(frz,name):
                l = []
                for f in frz:
                    if f != name:
                        l.append(f)
                return frozenset(l)

            for name in img_names:
                df_local_name = df_local[df_local['index'].astype(str).str.contains(name)]
                n_name = df_local_name.shape[0]
                df_local_name['index_'] = df_local_name['index'].apply(lambda x: remove_name(x,name))
                df_join = df_local_name.merge(df_global,how='inner', left_on=['index_'], right_on=['index'])
                dict_names[name] = df_join.shape[0]/n_name
            dict_classes[c] = sum(dict_names.values()) / len(dict_names)

    return dict_classes
    
def relation_analysis_2(df_gb, df_lc):
    dict_classes = {}
    for c in tqdm(classes):
        df_global = df_gb[df_gb['class']==c][['node1_label','relation_label','node2_label']].groupby(df_gb[df_gb['class']==c][['node1_label','relation_label','node2_label']].apply(frozenset,axis=1))['node1_label'].count().reset_index()['index'].to_list()
        print(df_lc.columns)
        df_local = df_lc[df_lc['class']==c][['node1_label','relation_label','node2_label']].groupby(df_lc[df_lc['class']==c][['node1_label','relation_label','node2_label','name']].apply(frozenset,axis=1))['node1_label'].count().reset_index()

        img_names = df_lc[df_lc['class']==c]['name'].unique()
        dict_names={}

        def remove_name(frz,name):
            l = []
            for f in frz:
                if f != name:
                    l.append(f)
            return frozenset(l)

        def comparison(list_,label):
            if label in list_:
                return True
            else:
                return False

        for name in img_names:
            df_local_name = df_local[df_local['index'].astype(str).str.contains(name)]
            df_local_name['index_'] = df_local_name['index'].apply(lambda x: remove_name(x,name))
            df_local_name['has_rel'] = df_local_name.apply(lambda x: comparison(df_global,x.index_), axis=1)
            dict_names[name] = 1 if df_local_name['has_rel'].sum() > 0 else 0
        dict_classes[c] = sum(dict_names.values()) / len(dict_names)

    return dict_classes

df_global_local = relation_analysis(df_rel_gb,df_rel_lc)
df_global_local_mto = relation_analysis(df_rel_mto_gb,df_rel_mto_lc)
df_global_local_img = relation_analysis_2(df_rel_gb,df_rel_lc_img)
df_global_local_img_mto = relation_analysis_2(df_rel_mto_gb,df_rel_mto_lc_img)
df_global_local_img_mto = relation_analysis_2(df_rel_mto_gb,df_rel_mto_lc_img)

def plot_results(df):
    fig, ax = plt.subplots(figsize=(20, 20))
    ax.bar(range(len(df)), list(df.values()), tick_label = list(df.keys()))
    ax.axhline(sum(df.values())/len(df), color='green', linestyle='-', linewidth=2, label='Avg')
    ax.fill_between(range(len(df)), (sum(df.values())/len(df))+ np.std(list(df.values())),(sum(df.values())/len(df))- np.std(list(df.values())), alpha=0.1, color='C2')
    ax.legend(['Avg','Std','Presence %'])
    plt.title('Relations presence between Local and Global', fontsize=20)
    plt.yticks(np.arange(0,1.1, 0.1),fontsize=20)
    plt.ylabel('%',fontsize=20)
    plt.xticks(fontsize=20,rotation=90)
    plt.xlabel('Class',fontsize=20)
    plt.savefig(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relation_local_global.png', bbox_inches="tight")

def plot_results_2(df):
    fig, ax = plt.subplots(figsize=(20, 20))
    ax.bar(range(len(df)), list(df.values()), tick_label = list(df.keys()))
    ax.legend(['Coverage'])
    plt.title('Relations evaluation between the Local and Global instances', fontsize=20)
    plt.yticks(np.arange(0,1.1, 0.1),fontsize=20)
    plt.ylabel('Coverage Value',fontsize=20)
    plt.xticks(fontsize=20,rotation=90)
    plt.xlabel('Class',fontsize=20)
    plt.savefig(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/relation_local_global_2.png', bbox_inches="tight")

plot_results(df_global_local_img_mto)

plot_results_2(df_global_local_img_mto)

# Preparing the dataset for the analysis
def prep_df(df):
    classes = df['class'].unique()
    dfs=[]
    for c in tqdm(classes):
        d = df[df['class']==c][['node1_label','relation_label','node2_label']].groupby(df[df['class']==c][['node1_label','relation_label','node2_label']].apply(frozenset,axis=1))['node1_label'].count().reset_index()
        d['class'] = c
        dfs.append(d)
    df_ = pd.concat(dfs)
    return df_

def plot_results_count(df, kind):
    fig, ax = plt.subplots(figsize=(20, 20))
    df = prep_df(df)
    df.groupby('class').agg({'class':'count'}).plot(kind='barh',ax=ax,grid=True, color='rebeccapurple')
    ax.invert_yaxis()
    ax.axvline(np.mean(df.groupby('class').agg({'class':'count'}).values), color='green', linestyle='-', linewidth=2, label='Avg')
    ax.fill_betweenx(range(len(df.groupby('class').agg({'class':'count'}))), np.mean(df.groupby('class').agg({'class':'count'}).values)+ np.std(df.groupby('class').agg({'class':'count'}).values),np.mean(df.groupby('class').agg({'class':'count'}).values)- np.std(df.groupby('class').agg({'class':'count'}).values), alpha=0.1, color='C2')
    ax.legend(['Avg','Std','# Relations'])
    plt.title(f'# {kind} Unique Relations', fontsize=20)
    plt.ylabel('Class',fontsize=20)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel('# Relations',fontsize=20)
    plt.savefig(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/unique_relations_{kind}.png', bbox_inches="tight")

plot_results_count(df_rel_mto_gb,'Global')

plot_results_count(df_rel_mto_lc_img,'Local')

def plot_results_count_2(df1,df2, kind1,kind2):
    fig, (ax2, ax1) = plt.subplots(1,2, figsize=(90,60))

    df1 = prep_df(df1)
    df1.groupby('class').agg({'class':'count'}).plot(kind='barh',ax=ax1,grid=True, color='rebeccapurple')
    ax1.invert_yaxis()
    ax1.axvline(np.mean(df1.groupby('class').agg({'class':'count'}).values), color='green', linestyle='-', linewidth=2, label='Avg')
    ax1.fill_betweenx(range(len(df1.groupby('class').agg({'class':'count'}))), np.mean(df1.groupby('class').agg({'class':'count'}).values)+ np.std(df1.groupby('class').agg({'class':'count'}).values),np.mean(df1.groupby('class').agg({'class':'count'}).values)- np.std(df1.groupby('class').agg({'class':'count'}).values), alpha=0.1, color='C2')
    ax1.legend(['Avg','Std','# Relations'])
    ax1.title.set_text(f'# {kind1} Unique Relations')
    plt.ylabel('Class',fontsize=50)
    plt.xticks(fontsize=50)
    plt.yticks(fontsize=50)
    ax1.set_xlabel('# Relations')

    df2 = prep_df(df2)
    df2.groupby('class').agg({'class':'count'}).plot(kind='barh',ax=ax2,grid=True, color='rebeccapurple')
    ax2.invert_yaxis()
    ax2.axvline(np.mean(df2.groupby('class').agg({'class':'count'}).values), color='green', linestyle='-', linewidth=2, label='Avg')
    ax2.fill_betweenx(range(len(df2.groupby('class').agg({'class':'count'}))), np.mean(df2.groupby('class').agg({'class':'count'}).values)+ np.std(df2.groupby('class').agg({'class':'count'}).values),np.mean(df2.groupby('class').agg({'class':'count'}).values)- np.std(df2.groupby('class').agg({'class':'count'}).values), alpha=0.1, color='C2')
    ax2.legend(['Avg','Std','# Relations'])
    ax2.title.set_text(f'# {kind2} Unique Relations')
    plt.ylabel('Class',fontsize=50)
    plt.xticks(fontsize=50)
    plt.yticks(fontsize=50)
    plt.xlabel('# Relations',fontsize=50)

    fig.tight_layout()
    plt.savefig(f'relation_extraction/{settings.DATASET_TRANS}_{settings.MODEL}/unique_relations_{kind1}_{kind2}.png', bbox_inches="tight")

plot_results_count_2(df_rel_mto_gb,df_rel_mto_lc_img,'Global','Local' )